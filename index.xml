<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leon 的博客</title>
    <link>https://tanlanxing.github.io:443/</link>
    <description>Recent content on Leon 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 12 Jul 2025 19:59:22 +0800</lastBuildDate>
    <atom:link href="https://tanlanxing.github.io:443/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Systemd Cgroup Process Management</title>
      <link>https://tanlanxing.github.io:443/posts/systemd-cgroup-process-management/</link>
      <pubDate>Sat, 12 Jul 2025 19:59:22 +0800</pubDate>
      <guid>https://tanlanxing.github.io:443/posts/systemd-cgroup-process-management/</guid>
      <description>0.背景知识 cgroup cgroup (Control Group) 是 linux 内核提供的一种机制，这种机制可以根据需求把一系列系统任务及其子任务整合(或分隔)到按资源划分等级的不同组内，从而为系统资源管理提供一个统一的框架。简单说，cgroup 可以限制、记录任务组所使用的物理资源。本质上来说，cgroup 是内核附加在程序上的一系列钩子(hook)，通过程序运行时对资源的调度触发相应的钩子以达到资源追踪和限制的目的。容器所依赖的基础之一就是 cgroup，本文不做展开。&#xA;cgroup 的设置有 3 种接口&#xA;接口文件&#xA;通过在挂载的 cgroup 文件系统中创建目录、文件，以及往可写文件中写入配置来实现&#xA;cgroup 工具：cgroup-bin&#xA;$ sudo apt install cgroup-bin $ cgexe --help systemd systemd systemd 是目前绝大多数主流 Linux 发行版的默认初始化系统，用于 Linux 系统和服务管理器，替代 initd。systemd 使用 cgroup 的层级关系来管理进程，同时 systemd 提供了 cgroups 的使用和管理接口。&#xA;1.问题的引出 公司产品包含一个 agent 服务，运行在客户主机上。agent 实现了自动升级机制。&#xA;Linux 下的实现如下：&#xA;agent 服务启动升级进程 upgrade upgrade 进程通过 fork 脱离 agent 服务进程 upgrade 进程停止 agent 服务 upgrade 进程更新 agent 程序文件 upgrade 进程启动 agent 服务 upgrade 进程退出 这套机制在 Linux 下一直正常运行着。最近反馈较高概率会出现升级失败，同时伴随着 agent 离线。</description>
    </item>
    <item>
      <title>Thread and Fork</title>
      <link>https://tanlanxing.github.io:443/posts/thread-and-fork/</link>
      <pubDate>Fri, 26 Jul 2024 21:59:44 +0800</pubDate>
      <guid>https://tanlanxing.github.io:443/posts/thread-and-fork/</guid>
      <description>之前小伙伴在开发中引入了一个多线程fork的问题，今天复盘一下。&#xA;背景 有一个 agent 服务，主进程启动后与调度服务建立一条 tcp 长连接，轮询调度服务通过这条连接下发的作业；主进程在接收到作业调度消息后，会拉起一个进程执行作业，自己则继续轮询作业消息。&#xA;由于业务发展，需要在 agent 侧再对作业做一次调度，主要是对并发执行作业的控制。&#xA;采用了在主进程增加一个调度线程的方案，主线程负责收作业消息，调度线程负责作业调度。&#xA;在发布测试后，测试同学反馈作业下发后执行似乎卡住了。&#xA;排查 为了便于说明，编写了一个简易的复现代码，后续的分析基于此代码。&#xA;# -*- encoding: utf-8 -*- from concurrent_log_handler import ConcurrentRotatingFileHandler from multiprocessing import Process from six.moves.queue import Queue from threading import Thread import logging import os import re import sys import time def getroot(): &amp;#34;&amp;#34;&amp;#34; get install root @return str &amp;#34;&amp;#34;&amp;#34; exec_name = os.path.basename(sys.executable) if re.match(r&amp;#39;python.*|py.*&amp;#39;, exec_name): root = os.path.dirname(os.path.realpath(__file__)) else: root = os.path.dirname(sys.executable) return root def init_log(): &amp;#34;&amp;#34;&amp;#34; :return: &amp;#34;&amp;#34;&amp;#34; log_dir = getroot() if not os.</description>
    </item>
    <item>
      <title>CodeIgniter Log Deadlock</title>
      <link>https://tanlanxing.github.io:443/posts/codeigniter-log-deadlock/</link>
      <pubDate>Sat, 06 Apr 2024 21:03:49 +0800</pubDate>
      <guid>https://tanlanxing.github.io:443/posts/codeigniter-log-deadlock/</guid>
      <description>案发 收到运维通报有一个站点响应很慢，甚至请求大量失败。&#xA;此前因为分区满了导致服务异常，清理出空间后，其他服务都恢复了正常，唯独 web 服务例外。&#xA;分析 浏览器端查看请求耗时，发现只有涉及 php 的请求有问题。&#xA;服务端查看 php-fpm 进程，数量达到了pm.max_children 的上限，fmp 日志如下：&#xA;[30-Mar-2024 17:41:09] WARNING: [pool www] seems busy (you may need to increase pm.start_servers, or pm.min/max_spare_servers), spawning 8 children, there are 0 idle, and 12 total children [30-Mar-2024 17:41:10] WARNING: [pool www] seems busy (you may need to increase pm.start_servers, or pm.min/max_spare_servers), spawning 16 children, there are 0 idle, and 17 total children [30-Mar-2024 17:41:11] WARNING: [pool www] seems busy (you may need to increase pm.</description>
    </item>
  </channel>
</rss>
